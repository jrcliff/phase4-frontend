[{"/Users/justinc/Flatiron/projects/Phase4/frontend/src/presentational/UserCard.jsx":"1","/Users/justinc/Flatiron/projects/Phase4/frontend/src/container/Profile.jsx":"2","/Users/justinc/Flatiron/projects/Phase4/frontend/src/container/LoginPage.jsx":"3","/Users/justinc/Flatiron/projects/Phase4/frontend/src/presentational/LoginForm.jsx":"4"},{"size":1124,"mtime":1609775069793,"results":"5","hashOfConfig":"6"},{"size":820,"mtime":1609775254678,"results":"7","hashOfConfig":"6"},{"size":576,"mtime":1609779603617,"results":"8","hashOfConfig":"6"},{"size":2475,"mtime":1609784648566,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"11p77mu",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/Users/justinc/Flatiron/projects/Phase4/frontend/src/presentational/UserCard.jsx",["20","21"],"/Users/justinc/Flatiron/projects/Phase4/frontend/src/container/Profile.jsx",["22"],"import React, { Component } from 'react'\nimport UserCard from '../presentational/UserCard'\nimport Timeline from './Timeline'\nexport default class Profile extends Component {\n    \n        state = {\n            users: []\n            \n        }\n     \n    componentDidMount(){\n        fetch('http://localhost:3000/users')\n        .then(res => res.json())\n        .then(userArr => this.setState({users: userArr}))\n    }\n\n    // getPosts = () => {\n    //     fetch('http://localhost:3000/posts')\n    //     .then(res => res.json())\n    //     .then(postsArr => this.setState({posts: postsArr}))\n    // }\n    render() {\n\n        return (\n            <div>\n                {this.state.users.map(user => <UserCard user={user} />)}\n                {/* <Timeline user={this.state.user}  /> */}\n            </div>\n        )\n    }\n}\n","/Users/justinc/Flatiron/projects/Phase4/frontend/src/container/LoginPage.jsx",[],"/Users/justinc/Flatiron/projects/Phase4/frontend/src/presentational/LoginForm.jsx",["23"],"import React, { Component } from \"react\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Message,\n  Segment,\n} from \"semantic-ui-react\";\n\nexport default class loginForm extends Component {\n  state = {\n    username: \"\",\n  };\n  \n  submitForm = (event) => {\n    \n    const username = {username: this.state.username}\n    console.log(username);\n        \n    \n    //userPostArray is an Array of objects \n    //Each object has an object of user and post\n    //User object has attributes of personal info\n    //Post object is an Array of objects which then have attributes about each post\n    //iterate through each user and check if the username entired matches\n    //if true render Timeline \n    //Timeline will be Posts\n    //Else alert sign up\n  }\n\n  submitCallback(){\n    let username = this.state.username \n    let reqObj = {headers: {'Content-Type': 'application/json'} , method: 'POST' , body: JSON.stringify(username)}\n    fetch('http://localhost:3000/login', reqObj)\n    .then(res => res.json())\n    .then(username => console.log(username))\n    \n  }\n  \n  handleChange(event){\n    this.setState({username: event.target.value})\n  }\n\n  render() {\n    return (\n      <Grid\n        textAlign=\"center\"\n        style={{ height: \"100vh\" }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Header as=\"h2\" color=\"blue\" textAlign=\"center\">\n            Welcome to Gamerbook!\n          </Header>\n          <Form\n            size=\"large\"\n            // onSubmit={(event) => this.submitForm(event.target.value)}\n          >\n            <Segment stacked>\n              <Form.Input\n                fluid\n                icon=\"user\"\n                iconPosition=\"left\"\n                placeholder=\"Username\"\n                onChange={(event) => this.setState({username: event.target.value})}\n                // onSubmit={(event) => this.props.loginForm(event.target.value)}\n              />\n              {/* <Form.Input\n                    fluid\n                    icon='lock'\n                    iconPosition='left'\n                    placeholder='Password'\n                    type='password'\n                  /> */}\n\n              <Button onClick={() => this.submitCallback()} color=\"blue\" fluid size=\"large\">\n                Login\n              </Button>\n            </Segment>\n          </Form>\n          <Message>\n            New to us? <a href=\"#\">Sign Up</a>\n          </Message>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n",{"ruleId":"24","severity":1,"message":"25","line":12,"column":7,"nodeType":"26","messageId":"27","endLine":12,"endColumn":27},{"ruleId":"28","severity":1,"message":"29","line":27,"column":17,"nodeType":"30","endLine":27,"endColumn":20},{"ruleId":"31","severity":1,"message":"32","line":3,"column":8,"nodeType":"33","messageId":"34","endLine":3,"endColumn":16},{"ruleId":"28","severity":1,"message":"35","line":83,"column":24,"nodeType":"30","endLine":83,"endColumn":36},"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'Timeline' is defined but never used.","Identifier","unusedVar","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md"]
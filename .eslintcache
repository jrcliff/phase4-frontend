[{"/Users/justinc/Flatiron/projects/Phase4/frontend/src/presentational/UserCard.jsx":"1","/Users/justinc/Flatiron/projects/Phase4/frontend/src/container/Profile.jsx":"2"},{"size":1124,"mtime":1609775069793,"results":"3","hashOfConfig":"4"},{"size":820,"mtime":1609775254678,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"11p77mu",{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/justinc/Flatiron/projects/Phase4/frontend/src/presentational/UserCard.jsx",["11","12"],"/Users/justinc/Flatiron/projects/Phase4/frontend/src/container/Profile.jsx",["13"],"import React, { Component } from 'react'\nimport UserCard from '../presentational/UserCard'\nimport Timeline from './Timeline'\nexport default class Profile extends Component {\n    \n        state = {\n            users: []\n            \n        }\n     \n    componentDidMount(){\n        fetch('http://localhost:3000/users')\n        .then(res => res.json())\n        .then(userArr => this.setState({users: userArr}))\n    }\n\n    // getPosts = () => {\n    //     fetch('http://localhost:3000/posts')\n    //     .then(res => res.json())\n    //     .then(postsArr => this.setState({posts: postsArr}))\n    // }\n    render() {\n\n        return (\n            <div>\n                {this.state.users.map(user => <UserCard user={user} />)}\n                {/* <Timeline user={this.state.user}  /> */}\n            </div>\n        )\n    }\n}\n",{"ruleId":"14","severity":1,"message":"15","line":12,"column":7,"nodeType":"16","messageId":"17","endLine":12,"endColumn":27},{"ruleId":"18","severity":1,"message":"19","line":27,"column":17,"nodeType":"20","endLine":27,"endColumn":20},{"ruleId":"21","severity":1,"message":"22","line":3,"column":8,"nodeType":"23","messageId":"24","endLine":3,"endColumn":16},"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'Timeline' is defined but never used.","Identifier","unusedVar"]